### Set port gloabally and drop and recreate tables
< {%
    client.global.set("port", "8080")
%}
POST http://localhost:{{port}}/api/database/recreate



### Call /demo/non-parallel
GET http://localhost:{{port}}/demo/non-parallel

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/parallel route
GET http://localhost:{{port}}/demo/parallel

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Create a User
POST http://localhost:{{port}}/users
Content-Type: application/json

{
  "username": "john.doe",
  "email": "john@test.com",
  "phoneNumber": "555-111-1234"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.username === "john.doe")
    });
%}

### Create a User with invalid inputs that will fail validation (will return a 400 with the errors)
POST http://localhost:{{port}}/users
Content-Type: application/json

{
  "username": "jane",
  "email": "jane@test.com",
  "phoneNumber": "111-223"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Create a User with the Accept-Language header set to French and with invalid inputs that will fail validation (will return a 400 with the errors in French)
POST http://localhost:{{port}}/users
Content-Type: application/json
Accept-Language: fr

{
  "username": "jane",
  "email": "invalid_email_address",
  "phoneNumber": "111-223"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

#### GET User with id 1 with its posts
GET http://localhost:{{port}}/users/1/with-posts
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id === 1)
        client.assert(response.body.posts[0].userId === 1)
    });
%}
