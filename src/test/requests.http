#You must start the app before running this file.

### Set a bearer token with no expiration date for testing purposes
@bearerToken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJkZW1vIiwic3ViIjoiMTYiLCJyb2xlIjoiUk9MRV9VU0VSIiwidHlwZSI6IkFDQ0VTU19UT0tFTiIsImV4cCI6Nzc1NjY2NjM4MX0.jslOf2fFRrNXgIxLwwestyJMWDBdEsNs0vdSo1KpfWM

### Set port gloabally and drop and call /demo route
< {%
    client.global.set("port", "8080")
%}
GET http://localhost:{{port}}/api/demo

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.startsWith("Welcome to my Spring Boot Kotlin app"))
    });
%}

### Call /demo route with the Accept-Language header set to French
GET http://localhost:{{port}}/api/demo
Accept-Language: fr

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.startsWith("Bienvenue dans mon app Spring Boot Kotlin"))
    });
%}

### Call /demo/blocking
GET http://localhost:{{port}}/api/demo/blocking

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/non-parallel route
GET http://localhost:{{port}}/api/demo/non-parallel

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/parallel route
GET http://localhost:{{port}}/api/demo/parallel

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/webclient route
GET http://localhost:{{port}}/api/demo/webclient

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.startsWith("Welcome to my Spring Boot Kotlin app"))
    });
%}

#### Call /demo/flow route
GET http://localhost:{{port}}/api/demo/flow
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Create a Profile
POST http://localhost:{{port}}/api/profile
Content-Type: application/json

{
  "phoneNumber": "555-111-1234"
}

### Create a Profile with an invalid phone number that will fail validation (will return a 400 with the errors)
POST http://localhost:{{port}}/api/profile
Content-Type: application/json

{
  "phoneNumber": "555-111-123"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}


### Create a User with the Accept-Language header set to French and with invalid inputs that will fail validation (will return a 400 with the errors in French)
POST http://localhost:{{port}}/api/profile
Content-Type: application/json
Accept-Language: fr

{
  "phoneNumber": "111-223"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}