### Set port gloabally and drop and recreate tables
< {%
    client.global.set("port", "8080")
%}
POST http://localhost:{{port}}/api/database/recreate

### Call /demo route
GET http://localhost:{{port}}/demo

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "Welcome to my Spring Boot Kotlin app")
    });
%}

### Call /demo route with the Accept-Language header set to French
GET http://localhost:{{port}}/demo
Accept-Language: fr

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "Bienvenue dans mon app Spring Boot Kotlin")
    });
%}

### Call /demo/blocking route
GET http://localhost:{{port}}/demo/blocking

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/async route
GET http://localhost:{{port}}/demo/async

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/webclient route
GET http://localhost:{{port}}/demo/webclient

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body === "Welcome to my Spring Boot Kotlin app")
    });
%}

### Create a User
POST http://localhost:{{port}}/users
Content-Type: application/json

{
  "username": "john.doe",
  "email": "john@test.com",
  "phoneNumber": "555-111-1234"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.username === "john.doe")
    });
%}

### Create a User with invalid inputs that will fail validation (will return a 400 with the errors)
POST http://localhost:{{port}}/users
Content-Type: application/json

{
  "username": "jane",
  "email": "jane@test.com",
  "phoneNumber": "111-223"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### Create a User with the Accept-Language header set to French and with invalid inputs that will fail validation (will return a 400 with the errors in French)
POST http://localhost:{{port}}/users
Content-Type: application/json
Accept-Language: fr

{
  "username": "jane",
  "email": "invalid_email_address",
  "phoneNumber": "111-223"
}

> {%
    client.test("Request executed with errors", function () {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

### GET User with id 1
GET http://localhost:{{port}}/users/1
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id === 1)
    });
%}

### Create a Post
POST http://localhost:{{port}}/posts
Content-Type: application/json

{
  "title": "The title",
  "description": "The description"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.userId === 1)
        client.assert(response.body.title === "The title")
    });
%}

### Create another Post
POST http://localhost:{{port}}/posts
Content-Type: application/json

{
  "title": "The title",
  "description": "The description"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.userId === 1)
        client.assert(response.body.title === "The title")
    });
%}

#### GET User with id 1 with its posts
GET http://localhost:{{port}}/users/1/with-posts
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id === 1)
        client.assert(response.body.posts[0].userId === 1)
    });
%}

### GET all Posts
GET http://localhost:{{port}}/posts
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### GET Post with id 1
GET http://localhost:{{port}}/posts/1
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id === 1)
    });
%}

### Create an Image
POST http://localhost:{{port}}/images
Content-Type: application/json

{
  "postId": 1,
  "url": "https://placehold.co/600x400"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.url === "https://placehold.co/600x400")
    });
%}

### GET Image with id 1
GET http://localhost:{{port}}/images/1
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.postId === 1)
        client.assert(response.body.url === "https://placehold.co/600x400")
    });
%}

### GET Post with id 1 with its images
GET http://localhost:{{port}}/posts/1/with-images
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.images[0].id === 1)
        client.assert(response.body.images[0].postId === 1)
    });
%}

### GET Post with id 1 with the user it belongs to
GET http://localhost:{{port}}/posts/1/with-user
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

#### GET User with id 1 with its images (hasManyImagesThroughPosts relationship)
GET http://localhost:{{port}}/users/1/with-images
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id === 1)
        client.assert(response.body.images[0].url === "https://placehold.co/600x400")
    });
%}


### Update Post with id 1
PUT http://localhost:{{port}}/posts/1
Content-Type: application/json

{
  "title": "The new title",
  "description": "The new description"
}

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

### Call /demo/webclient/flow route
GET http://localhost:{{port}}/demo/webclient/flow

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body[0].id === 1)
    });
%}

### Delete Post with id 1
DELETE http://localhost:{{port}}/posts/1
Accept: application/json

> {%
    client.test("Request executed successfully", function () {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

